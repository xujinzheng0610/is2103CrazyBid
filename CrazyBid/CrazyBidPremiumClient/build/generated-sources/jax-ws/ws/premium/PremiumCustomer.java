
package ws.premium;

import java.math.BigDecimal;
import java.util.List;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.FaultAction;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.11-b150120.1832
 * Generated source version: 2.2
 * 
 */
@WebService(name = "premiumCustomer", targetNamespace = "http://premiumCustomer.ws/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface PremiumCustomer {


    /**
     * 
     * @param password
     * @param username
     * @return
     *     returns ws.premium.Customer
     * @throws InvalidLoginCredentialException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "customerLogin", targetNamespace = "http://premiumCustomer.ws/", className = "ws.premium.CustomerLogin")
    @ResponseWrapper(localName = "customerLoginResponse", targetNamespace = "http://premiumCustomer.ws/", className = "ws.premium.CustomerLoginResponse")
    @Action(input = "http://premiumCustomer.ws/premiumCustomer/customerLoginRequest", output = "http://premiumCustomer.ws/premiumCustomer/customerLoginResponse", fault = {
        @FaultAction(className = InvalidLoginCredentialException_Exception.class, value = "http://premiumCustomer.ws/premiumCustomer/customerLogin/Fault/InvalidLoginCredentialException")
    })
    public Customer customerLogin(
        @WebParam(name = "username", targetNamespace = "")
        String username,
        @WebParam(name = "password", targetNamespace = "")
        String password)
        throws InvalidLoginCredentialException_Exception
    ;

    /**
     * 
     * @return
     *     returns java.util.List<ws.premium.AuctionListing>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "retrieveAllAuctionListings", targetNamespace = "http://premiumCustomer.ws/", className = "ws.premium.RetrieveAllAuctionListings")
    @ResponseWrapper(localName = "retrieveAllAuctionListingsResponse", targetNamespace = "http://premiumCustomer.ws/", className = "ws.premium.RetrieveAllAuctionListingsResponse")
    @Action(input = "http://premiumCustomer.ws/premiumCustomer/retrieveAllAuctionListingsRequest", output = "http://premiumCustomer.ws/premiumCustomer/retrieveAllAuctionListingsResponse")
    public List<AuctionListing> retrieveAllAuctionListings();

    /**
     * 
     * @param aId
     * @return
     *     returns ws.premium.AuctionListing
     * @throws AuctionListingNotFoundException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "retrieveAuctionListingById", targetNamespace = "http://premiumCustomer.ws/", className = "ws.premium.RetrieveAuctionListingById")
    @ResponseWrapper(localName = "retrieveAuctionListingByIdResponse", targetNamespace = "http://premiumCustomer.ws/", className = "ws.premium.RetrieveAuctionListingByIdResponse")
    @Action(input = "http://premiumCustomer.ws/premiumCustomer/retrieveAuctionListingByIdRequest", output = "http://premiumCustomer.ws/premiumCustomer/retrieveAuctionListingByIdResponse", fault = {
        @FaultAction(className = AuctionListingNotFoundException_Exception.class, value = "http://premiumCustomer.ws/premiumCustomer/retrieveAuctionListingById/Fault/AuctionListingNotFoundException")
    })
    public AuctionListing retrieveAuctionListingById(
        @WebParam(name = "aId", targetNamespace = "")
        Long aId)
        throws AuctionListingNotFoundException_Exception
    ;

    /**
     * 
     * @param username
     * @return
     *     returns ws.premium.Customer
     * @throws CustomerNotFoundException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "retrieveCustomerByUsername", targetNamespace = "http://premiumCustomer.ws/", className = "ws.premium.RetrieveCustomerByUsername")
    @ResponseWrapper(localName = "retrieveCustomerByUsernameResponse", targetNamespace = "http://premiumCustomer.ws/", className = "ws.premium.RetrieveCustomerByUsernameResponse")
    @Action(input = "http://premiumCustomer.ws/premiumCustomer/retrieveCustomerByUsernameRequest", output = "http://premiumCustomer.ws/premiumCustomer/retrieveCustomerByUsernameResponse", fault = {
        @FaultAction(className = CustomerNotFoundException_Exception.class, value = "http://premiumCustomer.ws/premiumCustomer/retrieveCustomerByUsername/Fault/CustomerNotFoundException")
    })
    public Customer retrieveCustomerByUsername(
        @WebParam(name = "username", targetNamespace = "")
        String username)
        throws CustomerNotFoundException_Exception
    ;

    /**
     * 
     * @param arg2
     * @param arg1
     * @param arg0
     */
    @WebMethod
    @RequestWrapper(localName = "newConfigureSniping", targetNamespace = "http://premiumCustomer.ws/", className = "ws.premium.NewConfigureSniping")
    @ResponseWrapper(localName = "newConfigureSnipingResponse", targetNamespace = "http://premiumCustomer.ws/", className = "ws.premium.NewConfigureSnipingResponse")
    @Action(input = "http://premiumCustomer.ws/premiumCustomer/newConfigureSnipingRequest", output = "http://premiumCustomer.ws/premiumCustomer/newConfigureSnipingResponse")
    public void newConfigureSniping(
        @WebParam(name = "arg0", targetNamespace = "")
        Long arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        Long arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        BigDecimal arg2);

}
